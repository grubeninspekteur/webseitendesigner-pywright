program = {{ whitespace }, (  expression, [ white space plus, comment ]
             | comment
             | multiline comment
             | function definition
             | entity definition
             ), line feed, optional space } ;
comment = "#", all characters - line feed ;
multiline comment = "/*", all characters, "*/" ;

expression = label | function call | implicit textbox | 'resume' | goto | conditional | 'exit' | assignment;

assignment = identifier, { white space }, ':=', { white space }, argument ;
             | entity field access, ':=', { white space }, argument ;

conditional = 'is', white space plus,
              argument, white space plus,
              (goto | function call), {white space plus, 'else', (goto | function call)} 

label = 'label', white space plus, identifier, [white space plus, identifier] ;
goto = 'goto', white space plus, identifier ;

entity field access = identifier, { white space }, ".",  { white space }, identifier ;
                      | identifier, { white space }, ".", entitiy field access

function call = identifier, {white space plus, argument} ;
argument = identifier | literal | "(" { white space }, function call, { white space }, ")" | list | entity field access | entity creation ;

list = "[", (empty |{argument, ","}, argument), "]"

entity creation = identifier, {white space}, "{",
                    (empty
                     | {{identifier, {white space}, ":=", {white space} argument, ","}, argument),
                     "}" ;

implicit textbox = string ;

function definition = 'def', white space,
                      identifier,
                      { white space, identifier },
                      line feed, { optional space },
                      { { whitespace }, ( expression - goto - label | comment | multiline comment | 'return', white space plus, argument ), line feed, optional space },
                      'enddef' ;

entity definition = 'entity', white space plus,
                    line feed, { optional space },
                    {({ whitespace }, identifier
                      | { whitespace }, identifier, { whitespace } ':=', { whitespace } literal), line feed},
                    'endentity'
                      

literal = string | number | boolean
string = '"' , { all characters - '"' }, '"' ;
boolean = 'true' | 'false' ;
identifier = identifier character, { identifier character | digit } ;
number = [ "-" ], digit, { digit } ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
identifier character = "A" | "B" | "C" | "D" | "E" | "F" | "G"
                     | "H" | "I" | "J" | "K" | "L" | "M" | "N"
                     | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
                     | "V" | "W" | "X" | "Y" | "Z" 
                     | "a" | "b" | "c" | "d" | "e" | "f" | "g"
                     | "h" | "i" | "j" | "k" | "l" | "m" | "n"
                     | "o" | "p" | "q" | "r" | "s" | "t" | "u"
                     | "v" | "w" | "x" | "y" | "z" | "_" ;
optional space = {line feed | white space} ;
white space plus = white space, {white space} ;
white space = ? white space characters without line feed ? ;
line feed = ? line feed characters ? ;
all characters = ? all visible characters ? ;